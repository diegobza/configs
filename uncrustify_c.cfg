newlines                                 = auto
#input_tab_size                           Number
#output_tab_size                          Number
#string_escape_char                       Number
#string_escape_char2                      Number
#tok_split_gte                            { False, True }
#utf8_bom                                 { Ignore, Add, Remove, Force }
#utf8_byte                                { False, True }
#utf8_force                               { False, True }
indent_columns                           = 4
#indent_continue                          Number
indent_with_tabs                         = 0
#indent_cmt_with_tabs                     { False, True }
#indent_align_string                      { False, True }
#indent_xml_string                        Number
#indent_brace                             Number
#indent_braces                            { False, True }
#indent_braces_no_func                    { False, True }
#indent_braces_no_class                   { False, True }
#indent_braces_no_struct                  { False, True }
#indent_brace_parent                      { False, True }
#indent_namespace                         { False, True }
#indent_namespace_level                   Number
#indent_namespace_limit                   Number
#indent_extern                            { False, True }
#indent_class                             { False, True }
#indent_class_colon                       { False, True }
#indent_ctor_init                         Number
#indent_else_if                           { False, True }
#indent_var_def_blk                       Number
#indent_var_def_cont                      { False, True }
#indent_func_call_param                   { False, True }
#indent_func_def_param                    { False, True }
#indent_func_proto_param                  { False, True }
#indent_func_class_param                  { False, True }
#indent_func_ctor_var_param               { False, True }
#indent_template_param                    { False, True }
#indent_func_param_double                 { False, True }
#indent_func_const                        Number
#indent_func_throw                        Number
#indent_member                            Number
#indent_sing_line_comments                Number
#indent_relative_single_line_comments     { False, True }
#indent_switch_case                       Number
#indent_case_shift                        Number
#indent_case_brace                        Number
#indent_col1_comment                      { False, True }
#indent_label                             Number
#indent_access_spec                       Number
#indent_access_spec_body                  { False, True }
#indent_paren_nl                          { False, True }
#indent_paren_close                       Number
#indent_comma_paren                       { False, True }
#indent_bool_paren                        { False, True }
#indent_first_bool_expr                   { False, True }
#indent_square_nl                         { False, True }
#indent_preserve_sql                      { False, True }
#indent_align_assign                      { False, True }
sp_arith                                 = Force
sp_assign                                = Force
#sp_assign_default                        { Ignore, Add, Remove, Force }
#sp_before_assign                         { Ignore, Add, Remove, Force }
#sp_after_assign                          { Ignore, Add, Remove, Force }
#sp_enum_assign                           { Ignore, Add, Remove, Force }
#sp_enum_before_assign                    { Ignore, Add, Remove, Force }
#sp_enum_after_assign                     { Ignore, Add, Remove, Force }
#sp_pp_concat                             { Ignore, Add, Remove, Force }
#sp_pp_stringify                          { Ignore, Add, Remove, Force }
sp_bool                                  = Force
sp_compare                               = Force
#sp_inside_paren                          { Ignore, Add, Remove, Force }
#sp_paren_paren                           { Ignore, Add, Remove, Force }
#sp_balance_nested_parens                 { False, True }
sp_paren_brace                           = Force
#sp_before_ptr_star                       { Ignore, Add, Remove, Force }
#sp_before_unnamed_ptr_star               { Ignore, Add, Remove, Force }
#sp_between_ptr_star                      { Ignore, Add, Remove, Force }
#sp_after_ptr_star                        { Ignore, Add, Remove, Force }
#sp_after_ptr_star_func                   { Ignore, Add, Remove, Force }
#sp_before_ptr_star_func                  { Ignore, Add, Remove, Force }
#sp_before_byref                          { Ignore, Add, Remove, Force }
#sp_before_unnamed_byref                  { Ignore, Add, Remove, Force }
#sp_after_byref                           { Ignore, Add, Remove, Force }
#sp_after_byref_func                      { Ignore, Add, Remove, Force }
#sp_before_byref_func                     { Ignore, Add, Remove, Force }
#sp_after_type                            { Ignore, Add, Remove, Force }
#sp_template_angle                        { Ignore, Add, Remove, Force }
#sp_before_angle                          { Ignore, Add, Remove, Force }
#sp_inside_angle                          { Ignore, Add, Remove, Force }
#sp_after_angle                           { Ignore, Add, Remove, Force }
#sp_angle_paren                           { Ignore, Add, Remove, Force }
#sp_angle_word                            { Ignore, Add, Remove, Force }
#sp_angle_shift                           { Ignore, Add, Remove, Force }
sp_before_sparen                         = Force
sp_inside_sparen                         = Remove
#sp_inside_sparen_close                   { Ignore, Add, Remove, Force }
sp_after_sparen                          = Force
sp_sparen_brace                          = Force
#sp_invariant_paren                       { Ignore, Add, Remove, Force }
#sp_after_invariant_paren                 { Ignore, Add, Remove, Force }
#sp_special_semi                          { Ignore, Add, Remove, Force }
#sp_before_semi                           { Ignore, Add, Remove, Force }
#sp_before_semi_for                       { Ignore, Add, Remove, Force }
#sp_before_semi_for_empty                 { Ignore, Add, Remove, Force }
#sp_after_semi                            { Ignore, Add, Remove, Force }
#sp_after_semi_for                        { Ignore, Add, Remove, Force }
#sp_after_semi_for_empty                  { Ignore, Add, Remove, Force }
#sp_before_square                         { Ignore, Add, Remove, Force }
sp_before_squares                        = Remove
#sp_inside_square                         { Ignore, Add, Remove, Force }
sp_after_comma                           = Force
#sp_before_comma                          { Ignore, Add, Remove, Force }
#sp_paren_comma                           { Ignore, Add, Remove, Force }
#sp_before_ellipsis                       { Ignore, Add, Remove, Force }
#sp_after_class_colon                     { Ignore, Add, Remove, Force }
#sp_before_class_colon                    { Ignore, Add, Remove, Force }
#sp_before_case_colon                     { Ignore, Add, Remove, Force }
#sp_after_operator                        { Ignore, Add, Remove, Force }
#sp_after_operator_sym                    { Ignore, Add, Remove, Force }
#sp_after_cast                            { Ignore, Add, Remove, Force }
#sp_inside_paren_cast                     { Ignore, Add, Remove, Force }
#sp_cpp_cast_paren                        { Ignore, Add, Remove, Force }
#sp_sizeof_paren                          { Ignore, Add, Remove, Force }
#sp_after_tag                             { Ignore, Add, Remove, Force }
#sp_inside_braces_enum                    { Ignore, Add, Remove, Force }
#sp_inside_braces_struct                  { Ignore, Add, Remove, Force }
#sp_inside_braces                         { Ignore, Add, Remove, Force }
#sp_inside_braces_empty                   { Ignore, Add, Remove, Force }
#sp_type_func                             { Ignore, Add, Remove, Force }
#sp_func_proto_paren                      { Ignore, Add, Remove, Force }
#sp_func_def_paren                        { Ignore, Add, Remove, Force }
#sp_inside_fparens                        { Ignore, Add, Remove, Force }
#sp_inside_fparen                         { Ignore, Add, Remove, Force }
#sp_square_fparen                         { Ignore, Add, Remove, Force }
#sp_fparen_brace                          { Ignore, Add, Remove, Force }
#sp_func_call_paren                       { Ignore, Add, Remove, Force }
#sp_func_call_paren_empty                 { Ignore, Add, Remove, Force }
#sp_func_call_user_paren                  { Ignore, Add, Remove, Force }
#sp_func_class_paren                      { Ignore, Add, Remove, Force }
#sp_return_paren                          { Ignore, Add, Remove, Force }
#sp_attribute_paren                       { Ignore, Add, Remove, Force }
#sp_defined_paren                         { Ignore, Add, Remove, Force }
#sp_throw_paren                           { Ignore, Add, Remove, Force }
#sp_catch_paren                           { Ignore, Add, Remove, Force }
#sp_version_paren                         { Ignore, Add, Remove, Force }
#sp_scope_paren                           { Ignore, Add, Remove, Force }
#sp_macro                                 { Ignore, Add, Remove, Force }
#sp_macro_func                            { Ignore, Add, Remove, Force }
#sp_else_brace                            { Ignore, Add, Remove, Force }
#sp_brace_else                            { Ignore, Add, Remove, Force }
#sp_brace_typedef                         { Ignore, Add, Remove, Force }
#sp_catch_brace                           { Ignore, Add, Remove, Force }
#sp_brace_catch                           { Ignore, Add, Remove, Force }
#sp_finally_brace                         { Ignore, Add, Remove, Force }
#sp_brace_finally                         { Ignore, Add, Remove, Force }
#sp_try_brace                             { Ignore, Add, Remove, Force }
#sp_getset_brace                          { Ignore, Add, Remove, Force }
#sp_before_dc                             { Ignore, Add, Remove, Force }
#sp_after_dc                              { Ignore, Add, Remove, Force }
#sp_d_array_colon                         { Ignore, Add, Remove, Force }
#sp_not                                   { Ignore, Add, Remove, Force }
#sp_inv                                   { Ignore, Add, Remove, Force }
#sp_addr                                  { Ignore, Add, Remove, Force }
#sp_member                                { Ignore, Add, Remove, Force }
#sp_deref                                 { Ignore, Add, Remove, Force }
#sp_sign                                  { Ignore, Add, Remove, Force }
#sp_incdec                                { Ignore, Add, Remove, Force }
#sp_before_nl_cont                        { Ignore, Add, Remove, Force }
#sp_after_oc_scope                        { Ignore, Add, Remove, Force }
#sp_after_oc_colon                        { Ignore, Add, Remove, Force }
#sp_before_oc_colon                       { Ignore, Add, Remove, Force }
#sp_after_send_oc_colon                   { Ignore, Add, Remove, Force }
#sp_before_send_oc_colon                  { Ignore, Add, Remove, Force }
#sp_after_oc_type                         { Ignore, Add, Remove, Force }
#sp_after_oc_return_type                  { Ignore, Add, Remove, Force }
#sp_after_oc_at_sel                       { Ignore, Add, Remove, Force }
#sp_after_oc_at_sel_parens                { Ignore, Add, Remove, Force }
#sp_inside_oc_at_sel_parens               { Ignore, Add, Remove, Force }
#sp_before_oc_block_caret                 { Ignore, Add, Remove, Force }
#sp_after_oc_block_caret                  { Ignore, Add, Remove, Force }
#sp_cond_colon                            { Ignore, Add, Remove, Force }
#sp_cond_question                         { Ignore, Add, Remove, Force }
#sp_case_label                            { Ignore, Add, Remove, Force }
#sp_range                                 { Ignore, Add, Remove, Force }
#sp_cmt_cpp_start                         { Ignore, Add, Remove, Force }
#sp_endif_cmt                             { Ignore, Add, Remove, Force }
#sp_after_new                             { Ignore, Add, Remove, Force }
#sp_before_tr_emb_cmt                     { Ignore, Add, Remove, Force }
#sp_num_before_tr_emb_cmt                 Number
#align_keep_tabs                          { False, True }
#align_with_tabs                          { False, True }
#align_on_tabstop                         { False, True }
#align_number_left                        { False, True }
#align_func_params                        { False, True }
#align_same_func_call_params              { False, True }
#align_var_def_span                       Number
#align_var_def_star_style                 Number
#align_var_def_amp_style                  Number
#align_var_def_thresh                     Number
#align_var_def_gap                        Number
#align_var_def_colon                      { False, True }
#align_var_def_attribute                  { False, True }
#align_var_def_inline                     { False, True }
#align_assign_span                        Number
#align_assign_thresh                      Number
#align_enum_equ_span                      Number
#align_enum_equ_thresh                    Number
#align_var_struct_span                    Number
#align_var_struct_thresh                  Number
#align_var_struct_gap                     Number
#align_struct_init_span                   Number
#align_typedef_gap                        Number
#align_typedef_span                       Number
#align_typedef_func                       Number
#align_typedef_star_style                 Number
#align_typedef_amp_style                  Number
#align_right_cmt_span                     Number
#align_right_cmt_mix                      { False, True }
#align_right_cmt_gap                      Number
#align_right_cmt_at_col                   Number
#align_func_proto_span                    Number
#align_func_proto_gap                     Number
#align_on_operator                        { False, True }
#align_mix_var_proto                      { False, True }
#align_single_line_func                   { False, True }
#align_single_line_brace                  { False, True }
#align_single_line_brace_gap              Number
#align_oc_msg_spec_span                   Number
#align_nl_cont                            { False, True }
#align_pp_define_gap                      Number
#align_pp_define_span                     Number
#align_left_shift                         { False, True }
#align_oc_msg_colon_span                  Number
#align_oc_decl_colon                      { False, True }
#nl_collapse_empty_body                   { False, True }
#nl_assign_leave_one_liners               { False, True }
#nl_class_leave_one_liners                { False, True }
#nl_enum_leave_one_liners                 { False, True }
#nl_getset_leave_one_liners               { False, True }
#nl_func_leave_one_liners                 { False, True }
#nl_if_leave_one_liners                   { False, True }
#nl_start_of_file                         { Ignore, Add, Remove, Force }
#nl_start_of_file_min                     Number
#nl_end_of_file                           { Ignore, Add, Remove, Force }
#nl_end_of_file_min                       Number
#nl_assign_brace                          { Ignore, Add, Remove, Force }
#nl_assign_square                         { Ignore, Add, Remove, Force }
#nl_after_square_assign                   { Ignore, Add, Remove, Force }
#nl_func_var_def_blk                      Number
#nl_fcall_brace                           { Ignore, Add, Remove, Force }
#nl_enum_brace                            { Ignore, Add, Remove, Force }
#nl_struct_brace                          { Ignore, Add, Remove, Force }
#nl_union_brace                           { Ignore, Add, Remove, Force }
nl_if_brace                              = Remove
nl_brace_else                            = Remove
#nl_elseif_brace                          { Ignore, Add, Remove, Force }
nl_else_brace                            = Remove
#nl_else_if                               { Ignore, Add, Remove, Force }
#nl_brace_finally                         { Ignore, Add, Remove, Force }
#nl_finally_brace                         { Ignore, Add, Remove, Force }
#nl_try_brace                             { Ignore, Add, Remove, Force }
#nl_getset_brace                          { Ignore, Add, Remove, Force }
#nl_for_brace                             { Ignore, Add, Remove, Force }
#nl_catch_brace                           { Ignore, Add, Remove, Force }
#nl_brace_catch                           { Ignore, Add, Remove, Force }
#nl_while_brace                           { Ignore, Add, Remove, Force }
#nl_using_brace                           { Ignore, Add, Remove, Force }
#nl_brace_brace                           { Ignore, Add, Remove, Force }
#nl_do_brace                              { Ignore, Add, Remove, Force }
#nl_brace_while                           { Ignore, Add, Remove, Force }
#nl_switch_brace                          { Ignore, Add, Remove, Force }
#nl_multi_line_cond                       { False, True }
#nl_multi_line_define                     { False, True }
#nl_before_case                           { False, True }
#nl_before_throw                          { Ignore, Add, Remove, Force }
#nl_after_case                            { False, True }
#nl_case_colon_brace                      { Ignore, Add, Remove, Force }
#nl_namespace_brace                       { Ignore, Add, Remove, Force }
#nl_template_class                        { Ignore, Add, Remove, Force }
#nl_class_brace                           { Ignore, Add, Remove, Force }
#nl_class_init_args                       { Ignore, Add, Remove, Force }
nl_func_type_name                        = Remove
#nl_func_type_name_class                  { Ignore, Add, Remove, Force }
#nl_func_scope_name                       { Ignore, Add, Remove, Force }
#nl_func_proto_type_name                  { Ignore, Add, Remove, Force }
#nl_func_paren                            { Ignore, Add, Remove, Force }
#nl_func_def_paren                        { Ignore, Add, Remove, Force }
#nl_func_decl_start                       { Ignore, Add, Remove, Force }
#nl_func_def_start                        { Ignore, Add, Remove, Force }
#nl_func_decl_start_single                { Ignore, Add, Remove, Force }
#nl_func_def_start_single                 { Ignore, Add, Remove, Force }
#nl_func_decl_args                        { Ignore, Add, Remove, Force }
#nl_func_def_args                         { Ignore, Add, Remove, Force }
#nl_func_decl_end                         { Ignore, Add, Remove, Force }
#nl_func_def_end                          { Ignore, Add, Remove, Force }
#nl_func_decl_end_single                  { Ignore, Add, Remove, Force }
#nl_func_def_end_single                   { Ignore, Add, Remove, Force }
#nl_func_decl_empty                       { Ignore, Add, Remove, Force }
#nl_func_def_empty                        { Ignore, Add, Remove, Force }
nl_fdef_brace                            = Force
#nl_after_return                          { False, True }
#nl_return_expr                           { Ignore, Add, Remove, Force }
#nl_after_semicolon                       { False, True }
#nl_after_brace_open                      { False, True }
#nl_after_brace_open_cmt                  { False, True }
#nl_after_vbrace_open                     { False, True }
#nl_after_vbrace_open_empty               { False, True }
#nl_after_brace_close                     { False, True }
#nl_after_vbrace_close                    { False, True }
#nl_define_macro                          { False, True }
#nl_squeeze_ifdef                         { False, True }
#nl_before_if                             { Ignore, Add, Remove, Force }
#nl_after_if                              { Ignore, Add, Remove, Force }
#nl_before_for                            { Ignore, Add, Remove, Force }
#nl_after_for                             { Ignore, Add, Remove, Force }
#nl_before_while                          { Ignore, Add, Remove, Force }
#nl_after_while                           { Ignore, Add, Remove, Force }
#nl_before_switch                         { Ignore, Add, Remove, Force }
#nl_after_switch                          { Ignore, Add, Remove, Force }
#nl_before_do                             { Ignore, Add, Remove, Force }
#nl_after_do                              { Ignore, Add, Remove, Force }
#nl_ds_struct_enum_cmt                    { False, True }
#nl_ds_struct_enum_close_brace            { False, True }
#nl_class_colon                           { Ignore, Add, Remove, Force }
#nl_create_if_one_liner                   { False, True }
#nl_create_for_one_liner                  { False, True }
#nl_create_while_one_liner                { False, True }
#pos_arith                                { Ignore, Lead, Trail }
#pos_assign                               { Ignore, Lead, Trail }
#pos_bool                                 { Ignore, Lead, Trail }
#pos_compare                              { Ignore, Lead, Trail }
#pos_conditional                          { Ignore, Lead, Trail }
#pos_comma                                { Ignore, Lead, Trail }
#pos_class_comma                          { Ignore, Lead, Trail }
#pos_class_colon                          { Ignore, Lead, Trail }
#code_width                               Number
#ls_for_split_full                        { False, True }
#ls_func_split_full                       { False, True }
#nl_max                                   Number
#nl_after_func_proto                      Number
#nl_after_func_proto_group                Number
#nl_after_func_body                       Number
#nl_after_func_body_class                 Number
#nl_after_func_body_one_liner             Number
#nl_before_block_comment                  Number
#nl_before_c_comment                      Number
#nl_before_cpp_comment                    Number
#nl_after_multiline_comment               { False, True }
#nl_after_struct                          Number
#nl_after_class                           Number
#nl_before_access_spec                    Number
#nl_after_access_spec                     Number
#nl_comment_func_def                      Number
#nl_after_try_catch_finally               Number
#nl_around_cs_property                    Number
#nl_between_get_set                       Number
#nl_property_brace                        { Ignore, Add, Remove, Force }
#eat_blanks_after_open_brace              { False, True }
#eat_blanks_before_close_brace            { False, True }
#mod_full_brace_do                        { Ignore, Add, Remove, Force }
#mod_full_brace_for                       { Ignore, Add, Remove, Force }
#mod_full_brace_function                  { Ignore, Add, Remove, Force }
#mod_full_brace_if                        { Ignore, Add, Remove, Force }
#mod_full_brace_if_chain                  { False, True }
#mod_full_brace_nl                        Number
#mod_full_brace_while                     { Ignore, Add, Remove, Force }
#mod_full_brace_using                     { Ignore, Add, Remove, Force }
#mod_paren_on_return                      { Ignore, Add, Remove, Force }
#mod_pawn_semicolon                       { False, True }
#mod_full_paren_if_bool                   { False, True }
#mod_remove_extra_semicolon               { False, True }
#mod_add_long_function_closebrace_comment Number
#mod_add_long_switch_closebrace_comment   Number
#mod_add_long_ifdef_endif_comment         Number
#mod_add_long_ifdef_else_comment          Number
#mod_sort_import                          { False, True }
#mod_sort_using                           { False, True }
#mod_sort_include                         { False, True }
#mod_move_case_break                      { False, True }
#mod_case_brace                           { Ignore, Add, Remove, Force }
#mod_remove_empty_return                  { False, True }
#cmt_width                                Number
#cmt_reflow_mode                          Number
#cmt_indent_multi                         { False, True }
#cmt_c_group                              { False, True }
#cmt_c_nl_start                           { False, True }
#cmt_c_nl_end                             { False, True }
#cmt_cpp_group                            { False, True }
#cmt_cpp_nl_start                         { False, True }
#cmt_cpp_nl_end                           { False, True }
#cmt_cpp_to_c                             { False, True }
#cmt_star_cont                            { False, True }
#cmt_sp_before_star_cont                  Number
#cmt_sp_after_star_cont                   Number
#cmt_multi_check_last                     { False, True }
#cmt_insert_file_header                   String
#cmt_insert_file_footer                   String
#cmt_insert_func_header                   String
#cmt_insert_class_header                  String
#cmt_insert_oc_msg_header                 String
#cmt_insert_before_preproc                { False, True }
#pp_indent                                { Ignore, Add, Remove, Force }
#pp_indent_at_level                       { False, True }
#pp_indent_count                          Number
#pp_space                                 { Ignore, Add, Remove, Force }
#pp_space_count                           Number
#pp_indent_region                         Number
#pp_region_indent_code                    { False, True }
#pp_indent_if                             Number
#pp_if_indent_code                        { False, True }
#pp_define_at_level                       { False, True }
